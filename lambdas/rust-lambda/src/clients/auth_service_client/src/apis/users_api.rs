/*
 * auth-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct UsersApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl UsersApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> UsersApiClient {
        UsersApiClient {
            configuration,
        }
    }
}

pub trait UsersApi {
    fn add_user(&self, add_user_request: crate::models::AddUserRequest) -> Pin<Box<dyn Future<Output = Result<crate::models::AddUserResponse, Error>>>>;
    fn delete_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::SuccessResponse, Error>>>>;
    fn get_all_users(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetAllResponse, Error>>>>;
    fn get_user(&self, user_id: &str, user: crate::models::User) -> Pin<Box<dyn Future<Output = Result<crate::models::User, Error>>>>;
}

impl UsersApi for UsersApiClient {
    #[allow(unused_mut)]
    fn add_user(&self, add_user_request: crate::models::AddUserRequest) -> Pin<Box<dyn Future<Output = Result<crate::models::AddUserResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/user".to_string())
        ;
        req = req.with_body_param(add_user_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<crate::models::SuccessResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/user/{user_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_all_users(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetAllResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/users".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_user(&self, user_id: &str, user: crate::models::User) -> Pin<Box<dyn Future<Output = Result<crate::models::User, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/user/{user_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(user);

        req.execute(self.configuration.borrow())
    }

}