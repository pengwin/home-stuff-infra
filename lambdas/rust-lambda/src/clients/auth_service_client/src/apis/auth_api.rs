/*
 * auth-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AuthApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl AuthApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> AuthApiClient {
        AuthApiClient {
            configuration,
        }
    }
}

pub trait AuthApi {
    fn authorize(&self, auth_request: crate::models::AuthRequest) -> Pin<Box<dyn Future<Output = Result<crate::models::AuthSuccessResponse, Error>>>>;
    fn profile(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::ProfileResponse, Error>>>>;
}

impl AuthApi for AuthApiClient {
    #[allow(unused_mut)]
    fn authorize(&self, auth_request: crate::models::AuthRequest) -> Pin<Box<dyn Future<Output = Result<crate::models::AuthSuccessResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/authorize".to_string())
        ;
        req = req.with_body_param(auth_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn profile(&self, ) -> Pin<Box<dyn Future<Output = Result<crate::models::ProfileResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/profile".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}